using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace Lesson7
{
    internal class Lesson7
    {
        //В этом уроке познакомимся с методами (или функциями)
        //Вообще мы уже много раз встречались с различными методами.
        //Например старт любой нашей программы начинался с вызова метода Main:
        
        //public static void Main(string[] args)
        //{
        //}
        
        /*
        А например вывод на консоль мы осуществляли с помощью метода WriteLine.
        Так что ж такое методы и с чем их едят.
        По сути дела метод это часть кода которую можно переиспользовать несколько раз
        Кроме того, эта часть кода может зависить от внешних параметров.
        Посмотрим на это дело более детально
        Например мы можем написать такой метод:
        */

        static void PrintLove()
        {
            Console.WriteLine("Love ❤");
        }
        
        /*
        Пойдем по порядку. static - пропускаем, просто пока прими к сведению что сейчас его надо добавлять всегда перед определением метода (но его может и не быть)
        Сначала странное слово void. Оно показывает то что метод возвращает. В данном случае ничего, но мы вернемся к этому позже
        Затем идет PrintLove - это название метода. Оно может быть любым, тут уж как автор захочет. (может даже содержать цифры, но начинаться имя должно обязательно с буквы или _)
        Далее идут круглы скобки, пока они пустые, но могут содержать параметры, поговорим об этом также позже
        Код написанный внутри фигурных скобок называется телом методом. 
        Внутри и написан код который будет выполняться при вызове метода. В данном случае будет просто выводить на экран: Love ❤
        */
        
        /*Посмотрим на другой метод*/

        static int Get20()
        {
            return 20;
            
        }
        
        /*В этом методе можно заметить два изменения по сравнению с предыдущим.
        Во-первых, появился int перед названием метода, это говорит нам о том что метод должен возвращать целочисленное значение
        Во-вторых, в конце метода появилась строчка return 20. которая говорит нам как раз о том что в данной строчке метод заканчивает свое выполнение и возвращает 20.
        После слово return ничего в методе выполняться не будет. Примеры:
        */

 static int Get30()
        {
            return 30;
            Console.WriteLine("Эта строчка не будет выведена на экран");
        }

        static int Get40()
        {

            if (1 > 2)
            {
                return 0;
            }
            else
            {
                Console.WriteLine("А эта строчка будет выведена на экран");
                return 40;
            }
        }
        
        /*Как видно из последнего примера, в методе может быть сколько угодно return*/

        static bool IsAdult(int age)
        {
            if (age >= 18)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        
        //В данном методе появилась еще одна особенность - параметр age.
        //В зависимости от этого параметра программа вернет true или false.
        //Параметров может быть сколько угодно, они перечисляются через запятую. Например:
        static void IsGoodPair(string maleName, string femaleName)
        {
            if (maleName == "Гриша" && femaleName == "Аня")
            {
                Console.WriteLine("Эта пара хороша");
            }
            else
            {
                Console.WriteLine("Эта пара так себе");
            }
        }
        
        //Теперь посмотрим на то как использовать методы.
        //Воспользуемся нашим старым другом методом Main.

        public static void Main()
        {
            int age = Get20();//После выполнения этой строчки в age будет лежать 20
            age = Get40(); //Сначала в консоль будет выведена строчка: "А эта строчка будет выведена на экран", после чего в age будет лежать 40.
            bool isAdult = IsAdult(age); //в переменной isAdult будет лежать результат выполнения метода IsAdult(40), т.е. true.
            
            IsGoodPair("Гриша", "Аня"); //На экран выведется "эта пара хороша"
            
            //Переходим к заданиям.
            //В заданиях нужно будет написать несколько методов.
            //Методы нужно писать за пределами метода Main, однако вызывать их стоит в методе Main
            
         IsGoodPerson();
            int[] arr = new[] {1, 2, 3, 4, 5, 6};    
            int[] arr2 = new[] {1, 2, 3, 4, 5, 6};
            int[] arr3 = new[] {1, 2, 3, 4, 5, 6, 7};
         PrintArray(arr);
         PrintArray2(arr);
            int[] result2 = PrintArray2(arr);
            for (int i = 0; i < result2.Length; i++)
            {
                Console.WriteLine(result2[i]);

            }
            
         bool result = EquallArray(arr2, arr3);
            Console.WriteLine(result);
          

        } // <-- тут заканчивается метод Main
        
        //Тут можно писать свои методы.
        static void IsGoodPerson()
        {
            Console.WriteLine("enter name");
            string name = Console.ReadLine();
            Console.WriteLine( name + " хороший человек");
        }

        static void PrintArray(int[] A)
        {
            for (int i = 0; i < A.Length; i++)
            {
                Console.WriteLine(A[i]);
            }
        }
        
        static int[] PrintArray2(int[] b)
        {
            int[] result = new int[b.Length];
            for (int j = b.Length-1; j>=0; j--)
            {
                result[b.Length-j-1] = b[j];
            }
            return result;
        }

        static bool EquallArray(int[] c, int[] d)
        {
            if (c.Length != d.Length)
                {return false;}

            for (int q = 0; q < c.Length; q++)
            {
                if (c[q] != d[q])
                {
                    return false;
                }
            }

            return true;


        }






        //Задание 1. Написать метод который спрашивает у пользователя его имя и возвращает строчку: "{имя_пользователя} хороший человек"
        //Задание 2. Написать метод PrintArray который принимает массив целочисленных значений и распечатывает его элементы.
        //Задание 3. Написать метод который получает массив целочисленных значений, а возвращает массив такой же длины но значения в нем расположены в обратном порядке
        //Задание 4. Написать метод который принимает два массива целочисленных чисел и возвращает true если массивы равны и false иначе
    }
}